{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth.service\";\nexport class AuthGuard {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  canActivate(route, state) {\n    if (!this.authService.currentUser) this.router.navigate(['/register-passenger', {\n      requestedUrl: state.url\n    }]);\n    return true; //blikira dugme 'Book'\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,MAAc,EACdC,WAAwB;IADxB,WAAM,GAAND,MAAM;IACN,gBAAW,GAAXC,WAAW;EAAiB;EAEhDC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAI,CAAC,IAAI,CAACH,WAAW,CAACI,WAAW,EAC/B,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,qBAAqB,EAAE;MAAEC,YAAY,EAAEH,KAAK,CAACI;IAAG,CAAE,CAAC,CAAC;IAE5E,OAAO,IAAI,CAAC,CAAC;EAEf;EAAC;qBAdUV,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAW,SAATX,SAAS;IAAAY,YAFR;EAAM","names":["AuthGuard","constructor","router","authService","canActivate","route","state","currentUser","navigate","requestedUrl","url","factory","providedIn"],"sourceRoot":"","sources":["D:\\Anglular\\Flights\\Flights\\ClientApp\\src\\app\\auth\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private router: Router,\n              private authService: AuthService) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    if (!this.authService.currentUser)\n      this.router.navigate(['/register-passenger', { requestedUrl: state.url }])\n\n    return true; //blikira dugme 'Book'\n\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}