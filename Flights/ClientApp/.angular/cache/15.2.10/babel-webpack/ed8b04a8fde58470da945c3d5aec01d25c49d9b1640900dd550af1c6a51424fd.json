{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet BookFlightComponent = class BookFlightComponent {\n  constructor(route, router, flightService, authService, formBuilder) {\n    this.route = route;\n    this.router = router;\n    this.flightService = flightService;\n    this.authService = authService;\n    this.formBuilder = formBuilder;\n    this.flightId = 'not loaded';\n    this.flight = {};\n    //forma bookiranja\n    this.form = this.formBuilder.group({\n      //Definisanje polja sa validacijom\n      number: [1, Validators.compose([Validators.required, Validators.min(1), Validators.max(254)])]\n    });\n    this.findFlight = flightId => {\n      this.flightId = flightId ?? 'not passed';\n      this.flightService.findFlight({\n        id: this.flightId\n      }).subscribe(flight => this.flight = flight, this.handleError);\n    };\n    this.handleError = err => {\n      if (err.status == 404) {\n        alert(\"Flight not found!\");\n        this.router.navigate(['/search-flights']);\n      }\n      console.log(\"Response Error. Status: \", err.status);\n      console.log(\"Response Error. Status Text: \", err.statusText);\n      console.log(err);\n    };\n  }\n  ngOnInit() {\n    if (!this.authService.currentUser) this.router.navigate(['/register-passenger']);\n    this.route.paramMap.subscribe(p => this.findFlight(p.get(\"flightId\")));\n  }\n  //metoda forme za Booking\n  book() {\n    if (this.form.invalid) return;\n    console.log(`Booking ${this.form.get('nu mber')?.value} passengers for the flight: ${this.flight.id}`);\n    const booking = {\n      flightId: this.flight.id,\n      passengerEmail: this.authService.currentUser?.email,\n      numberOfSeats: this.form.get('number')?.value\n    };\n    //dodali smo putanju da Componente My-Booking, povezujemo \n    this.flightService.bookFlight({\n      body: booking\n    }).subscribe(_ => this.router.navigate(['/my-bookings']), console.error);\n  }\n  get number() {\n    return this.form.controls.number;\n  }\n};\nBookFlightComponent = __decorate([Component({\n  selector: 'app-book-flight',\n  templateUrl: './book-flight.component.html',\n  styleUrls: ['./book-flight.component.css']\n})], BookFlightComponent);\nexport { BookFlightComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAKjD,SAAsBC,UAAU,QAAQ,gBAAgB;AAQjD,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAE9BC,YAAoBC,KAAqB,EAC/BC,MAAc,EACdC,aAA4B,EAC5BC,WAAwB,EACxBC,WAAwB;IAJd,UAAK,GAALJ,KAAK;IACf,WAAM,GAANC,MAAM;IACN,kBAAa,GAAbC,aAAa;IACb,gBAAW,GAAXC,WAAW;IACX,gBAAW,GAAXC,WAAW;IAGrB,aAAQ,GAAW,YAAY;IAC/B,WAAM,GAAa,EAAE;IAErB;IACA,SAAI,GAAG,IAAI,CAACA,WAAW,CAACC,KAAK,CAAC;MAC5B;MACAC,MAAM,EAAE,CAAC,CAAC,EAAET,UAAU,CAACU,OAAO,CAAC,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACY,GAAG,CAAC,CAAC,CAAC,EAAEZ,UAAU,CAACa,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;KAC9F,CAAC;IAYM,eAAU,GAAIC,QAAuB,IAAI;MAC/C,IAAI,CAACA,QAAQ,GAAGA,QAAQ,IAAI,YAAY;MAExC,IAAI,CAACT,aAAa,CAACU,UAAU,CAAC;QAAEC,EAAE,EAAE,IAAI,CAACF;MAAQ,CAAE,CAAC,CACjDG,SAAS,CAACC,MAAM,IAAI,IAAI,CAACA,MAAM,GAAGA,MAAM,EACvC,IAAI,CAACC,WAAW,CAAC;IACvB,CAAC;IAEO,gBAAW,GAAIC,GAAQ,IAAI;MACjC,IAAIA,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;QACrBC,KAAK,CAAC,mBAAmB,CAAC;QAC1B,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;;MAG3CC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEL,GAAG,CAACC,MAAM,CAAC;MACnDG,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEL,GAAG,CAACM,UAAU,CAAC;MAC5DF,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC;IAClB,CAAC;EAvCuC;EAaxCO,QAAQ;IAEN,IAAI,CAAC,IAAI,CAACrB,WAAW,CAACsB,WAAW,EAC/B,IAAI,CAACxB,MAAM,CAACmB,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC;IAE/C,IAAI,CAACpB,KAAK,CAAC0B,QAAQ,CAChBZ,SAAS,CAACa,CAAC,IAAI,IAAI,CAACf,UAAU,CAACe,CAAC,CAACC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;EACvD;EAqBA;EACAC,IAAI;IAEF,IAAI,IAAI,CAACC,IAAI,CAACC,OAAO,EACnB;IAEFV,OAAO,CAACC,GAAG,CAAC,WAAW,IAAI,CAACQ,IAAI,CAACF,GAAG,CAAC,SAAS,CAAC,EAAEI,KAAK,+BAA+B,IAAI,CAACjB,MAAM,CAACF,EAAE,EAAE,CAAC;IAEtG,MAAMoB,OAAO,GAAY;MACvBtB,QAAQ,EAAE,IAAI,CAACI,MAAM,CAACF,EAAE;MACxBqB,cAAc,EAAE,IAAI,CAAC/B,WAAW,CAACsB,WAAW,EAAEU,KAAK;MACnDC,aAAa,EAAE,IAAI,CAACN,IAAI,CAACF,GAAG,CAAC,QAAQ,CAAC,EAAEI;KACzC;IAED;IACA,IAAI,CAAC9B,aAAa,CAACmC,UAAU,CAAC;MAAEC,IAAI,EAAEL;IAAO,CAAE,CAAC,CAC7CnB,SAAS,CAACyB,CAAC,IAAI,IAAI,CAACtC,MAAM,CAACmB,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,EAAEC,OAAO,CAACmB,KAAK,CAAC;EAC1E;EAEA,IAAIlC,MAAM;IACR,OAAO,IAAI,CAACwB,IAAI,CAACW,QAAQ,CAACnC,MAAM;EAClC;CAGD;AAvEYR,mBAAmB,eAN/BF,SAAS,CAAC;EACT8C,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,GAEW9C,mBAAmB,CAuE/B;SAvEYA,mBAAmB","names":["Component","Validators","BookFlightComponent","constructor","route","router","flightService","authService","formBuilder","group","number","compose","required","min","max","flightId","findFlight","id","subscribe","flight","handleError","err","status","alert","navigate","console","log","statusText","ngOnInit","currentUser","paramMap","p","get","book","form","invalid","value","booking","passengerEmail","email","numberOfSeats","bookFlight","body","_","error","controls","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Anglular\\Flights\\Flights\\ClientApp\\src\\app\\book-flight\\book-flight.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FlightService } from './../api/services/flight.service';\nimport { BookDto, FlightRm } from '../api/models';\nimport { AuthService } from '../auth/auth.service';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\n \n@Component({\r\n  selector: 'app-book-flight',\r\n  templateUrl: './book-flight.component.html',\r\n  styleUrls: ['./book-flight.component.css']\r\n})\n\nexport class BookFlightComponent implements OnInit {\n\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private flightService: FlightService,\n    private authService: AuthService,\n    private formBuilder: FormBuilder  ) { }\n\n\n  flightId: string = 'not loaded'\n  flight: FlightRm = {}\n\n  //forma bookiranja\n  form = this.formBuilder.group({\n    //Definisanje polja sa validacijom\n    number: [1, Validators.compose([Validators.required, Validators.min(1), Validators.max(254)])]\n  })\n\n\n  ngOnInit(): void {\n\n    if (!this.authService.currentUser)\n      this.router.navigate(['/register-passenger'])\n\n    this.route.paramMap\r\n      .subscribe(p => this.findFlight(p.get(\"flightId\")))\r\n  }\n\n  private findFlight = (flightId: string | null) => {\n    this.flightId = flightId ?? 'not passed';\r\n\r\n    this.flightService.findFlight({ id: this.flightId })\r\n      .subscribe(flight => this.flight = flight,\r\n        this.handleError)\r\n  }\n\n  private handleError = (err: any) => {\n    if (err.status == 404) {\n      alert(\"Flight not found!\")\r\n      this.router.navigate(['/search-flights'])\r\n    }\n\n    console.log(\"Response Error. Status: \", err.status)\n    console.log(\"Response Error. Status Text: \", err.statusText)\n    console.log(err)\r\n  }\n\n  //metoda forme za Booking\n  book() {\n\n    if (this.form.invalid)\n      return;\n\n    console.log(`Booking ${this.form.get('nu mber')?.value} passengers for the flight: ${this.flight.id}`)\r\n\r\n    const booking: BookDto = {\r\n      flightId: this.flight.id,\r\n      passengerEmail: this.authService.currentUser?.email,\r\n      numberOfSeats: this.form.get('number')?.value\r\n    }\r\n\r\n    //dodali smo putanju da Componente My-Booking, povezujemo \r\n    this.flightService.bookFlight({ body: booking })\n      .subscribe(_ => this.router.navigate(['/my-bookings']), console.error)\r\n  }\n\n  get number() {\n    return this.form.controls.number\r\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}