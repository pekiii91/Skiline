{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { map, filter } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class PassengerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /**\r\n   * Path part for operation registerPassenger\r\n   */\n  static #_ = this.RegisterPassengerPath = '/Passenger';\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `registerPassenger()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  registerPassenger$Response(params) {\n    const rb = new RequestBuilder(this.rootUrl, PassengerService.RegisterPassengerPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `registerPassenger$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  registerPassenger(params) {\n    return this.registerPassenger$Response(params).pipe(map(r => r.body));\n  }\n  /**\r\n   * Path part for operation findPassenger\r\n   */\n  static #_2 = this.FindPassengerPath = '/Passenger/{email}';\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassenger$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassenger$Plain$Response(params) {\n    const rb = new RequestBuilder(this.rootUrl, PassengerService.FindPassengerPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain'\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `findPassenger$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassenger$Plain(params) {\n    return this.findPassenger$Plain$Response(params).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassenger()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassenger$Response(params) {\n    const rb = new RequestBuilder(this.rootUrl, PassengerService.FindPassengerPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json'\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `findPassenger$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findPassenger(params) {\n    return this.findPassenger$Response(params).pipe(map(r => r.body));\n  }\n  static #_3 = this.ɵfac = function PassengerService_Factory(t) {\n    return new (t || PassengerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_4 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PassengerService,\n    factory: PassengerService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpResponse","map","filter","BaseService","RequestBuilder","PassengerService","constructor","config","http","registerPassenger$Response","params","rb","rootUrl","RegisterPassengerPath","body","request","build","responseType","accept","pipe","r","clone","undefined","registerPassenger","findPassenger$Plain$Response","FindPassengerPath","path","email","findPassenger$Plain","findPassenger$Response","findPassenger","factory","providedIn"],"sourceRoot":"","sources":["D:\\Anglular\\Flights\\Flights\\ClientApp\\src\\app\\api\\services\\passenger.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\nimport { findPassenger } from '../fn/passenger/find-passenger';\r\nimport { FindPassenger$Params } from '../fn/passenger/find-passenger';\r\nimport { findPassenger$Plain } from '../fn/passenger/find-passenger-plain';\r\nimport { FindPassenger$Plain$Params } from '../fn/passenger/find-passenger-plain';\r\nimport { PassengerRm } from '../models/passenger-rm';\r\nimport { NewPassengerDto } from '../models/new-passenger-dto';\r\nimport { registerPassenger } from '../fn/passenger/register-passenger';\r\nimport { RegisterPassenger$Params } from '../fn/passenger/register-passenger';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PassengerService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation registerPassenger\r\n   */\r\n  static readonly RegisterPassengerPath = '/Passenger';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `registerPassenger()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  registerPassenger$Response(params?: {\r\n    body?: NewPassengerDto\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, PassengerService.RegisterPassengerPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `registerPassenger$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  registerPassenger(params?: {\r\n    body?: NewPassengerDto\r\n  }): Observable<void> {\r\n\r\n    return this.registerPassenger$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation findPassenger\r\n   */\r\n  static readonly FindPassengerPath = '/Passenger/{email}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassenger$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassenger$Plain$Response(params: {\r\n    email: string;\r\n  }): Observable<StrictHttpResponse<PassengerRm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, PassengerService.FindPassengerPath, 'get');\r\n    if (params) {\r\n      rb.path('email', params.email, {});\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<PassengerRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `findPassenger$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassenger$Plain(params: {\r\n    email: string;\r\n  }): Observable<PassengerRm> {\r\n\r\n    return this.findPassenger$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<PassengerRm>) => r.body as PassengerRm)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findPassenger()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassenger$Response(params: {\r\n    email: string;\r\n  }): Observable<StrictHttpResponse<PassengerRm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, PassengerService.FindPassengerPath, 'get');\r\n    if (params) {\r\n      rb.path('email', params.email, {});\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<PassengerRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `findPassenger$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findPassenger(params: {\r\n    email: string;\r\n  }): Observable<PassengerRm> {\r\n\r\n    return this.findPassenger$Response(params).pipe(\r\n      map((r: StrictHttpResponse<PassengerRm>) => r.body as PassengerRm)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}